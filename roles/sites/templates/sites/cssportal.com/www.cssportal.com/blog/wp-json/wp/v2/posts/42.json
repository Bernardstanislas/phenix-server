{"id":42,"date":"2013-03-29T05:03:02","date_gmt":"2013-03-29T05:03:02","guid":{"rendered":"http:\/\/www.cssportal.com\/blog\/?p=42"},"modified":"2022-04-15T02:26:49","modified_gmt":"2022-04-15T02:26:49","slug":"css-shorthand-properties","status":"publish","type":"post","link":"https:\/\/www.cssportal.com\/blog\/css-shorthand-properties\/","title":{"rendered":"CSS Shorthand Properties"},"content":{"rendered":"<p>One of the many great features of CSS is that you can use shorthand properties to reduce the file size of your CSS. By reducing the file size, you cut down on bandwidth and most importantly you increase the speed\u00a0of your website loading times. Although both of these reasons are very minor, every bit of speed\u00a0and size counts.<!--more--><\/p>\n<p>In this article, I will explain the differences between shorthand and longhand for\u00a0five of the more common properties, which will be: <a title=\"CSS Padding Property\" href=\"https:\/\/www.cssportal.com\/css-properties\/padding.php\">padding<\/a> \/ <a title=\"CSS Margin Property\" href=\"https:\/\/www.cssportal.com\/css-properties\/margin.php\">margins<\/a>, <a title=\"CSS Margin Property\" href=\"https:\/\/www.cssportal.com\/css-properties\/border.php\">borders<\/a>, <a title=\"CSS Background Property\" href=\"https:\/\/www.cssportal.com\/css-properties\/background.php\">backgrounds<\/a>,\u00a0<a title=\"CSS Font Property\" href=\"https:\/\/www.cssportal.com\/css-properties\/font.php\">fonts<\/a> and <a title=\"CSS List Style Property\" href=\"https:\/\/www.cssportal.com\/css-properties\/list-style.php\">lists<\/a>. Now one thing that you need to remember is that shorthand properties are not always the best solution to use, you&#8217;ll always need to way up the pros and cons before selecting the shorthand or longhand properties.<\/p>\n<h2>Padding and Margins<\/h2>\n<p>With paddings and margins, there are a number of different ways that you can define this shorthand. Instead of using different properties for top, right, bottom and left, such as the example below:<\/p>\n<pre class=\"language-css\"><code>margin-top: 20px;\r\nmargin-right: 15px;\r\nmargin-bottom: 25px;\r\nmargin-left: 5px;<\/code><\/pre>\n<p>You can use just one property to do the same thing:<\/p>\n<pre class=\"language-css\"><code>margin: 20px 15px 25px 5px;<\/code><\/pre>\n<p>Both of the above examples will produce exactly the same results.<\/p>\n<p>How about if all of the margins were the same size, such as 10px, we would be able to reduce the code even further.<\/p>\n<pre class=\"language-css\"><code>margin: 10px;<\/code><\/pre>\n<p>Lets now take a look at the following example:<\/p>\n<pre class=\"language-css\"><code>margin-top: 10px;\r\nmargin-right: 15px;\r\nmargin-bottom: 10px;\r\nmargin-left: 15px;<\/code><\/pre>\n<p>In the above example, we have the top and bottom the same and the left and right margins are the same, we can use the following shorthand to achieve the same results:<\/p>\n<pre class=\"language-css\"><code>margin: 10px 15px;<\/code><\/pre>\n<p>There is also one other shorthand we can use with margins and paddings, lets take a look at the code below:<\/p>\n<pre class=\"language-css\"><code>margin-top: 10px;\r\nmargin-right: 5px;\r\nmargin-bottom: 20px;\r\nmargin-left: 5px;<\/code><\/pre>\n<p>This can be shortened using only three variables, when the right and left sizes are the same:<\/p>\n<pre class=\"language-css\"><code>margin: 10px 5px 20px;<\/code><\/pre>\n<p><strong>Note:<\/strong> I have used the margin property, but the same structure can be used for the padding property.<\/p>\n<h2>Borders<\/h2>\n<p>With the border property, you can also use shorthand properties to reduce your code, depending on if all of the borders are the same size or if they are different, you can save a fair bit of time by using the shorthand property. Take a look at the code below:<\/p>\n<pre class=\"language-css\"><code>border-width: 2px;\r\nborder-style: solid;\r\nborder-color: #000000;<\/code><\/pre>\n<p>This can be shortened into one line of code using the following:<\/p>\n<pre class=\"language-css\"><code>border: 2px solid #000000;<\/code><\/pre>\n<p>The above code is so much easier and efficient to use. What happens though if the border sizes are different? Well we can still use the shorthand code with the border-width property as seen below:<\/p>\n<pre class=\"language-css\"><code>border: solid #000000;\r\nborder-width: 3px 1px;<\/code><\/pre>\n<p>The above will give a border at the top and bottom 3px wide and the sides 1px, with a solid black border.<\/p>\n<h2>Backgrounds<\/h2>\n<p>Lets no take a look at the background property. If written separately, there could be as many as 5 lines of the code to specify the background.<\/p>\n<pre class=\"language-css\"><code>background-color: #FFF;\r\nbackground-image: url(bg.gif);\r\nbackground-repeat: no-repeat;\r\nbackground-attachment: fixed;\r\nbackground-position: left 50%;<\/code><\/pre>\n<p>Wow, that is too much to write, we can condense the above into the following for the same results:<\/p>\n<pre class=\"language-css\"><code>background: #fff url(bg.gif) no-repeat fixed left 50%;<\/code><\/pre>\n<p>By writing the code this way, it reduces the size by over 50%!<\/p>\n<h2>Fonts<\/h2>\n<p>When using the font shorthand property, there are two requirements that have to be used otherwise the font will not display correctly, these are: font-family and font-size. All other properties if not used will just default to &#8216;normal&#8217;. Lets take a look at the individual properties.<\/p>\n<pre class=\"language-css\"><code>font-style: italic;\r\nfont-variant: small-caps;\r\nfont-weight: bold;\r\nfont-size: 2em;\r\nline-height: 30px;\r\nfont-family: 'Times New Roman', Georgia, Serif;<\/code><\/pre>\n<p>The above can be written neatly in one line of shorthand code:<\/p>\n<pre class=\"language-css\"><code>font: italic small-caps bold 2em\/30px 'Times New Roman', Georgia, Serif;<\/code><\/pre>\n<p>As stated in the opening paragraph under &#8216;Fonts&#8217;, the minimum requirements for the font property to work will look like this:<\/p>\n<pre class=\"language-css\"><code>font: 2em\/30px 'Times New Roman', Georgia, Serif;<\/code><\/pre>\n<p>Anything less and the font property will not work.<\/p>\n<h2>Lists<\/h2>\n<p>The final shorthand property we will explain is the list-style property, although not as widely used as the above examples, it&#8217;s still good to learn the shorthand for this property.<\/p>\n<pre class=\"language-css\"><code>list-style-type: disc;\r\nlist-style-position: outside;\r\nlist-style-image: url(bullet.gif);<\/code><\/pre>\n<p>This can be shortened to the following, with at least a 50% saving in size:<\/p>\n<pre class=\"language-css\"><code>list-style: disc outside url(bullet.gif);<\/code><\/pre>\n<h2>Conclusion<\/h2>\n<p>As can seen by looking at all of the above code, it makes sense to use CSS shorthand properties. Not only does it reduce file size but personally I feel that it is a much cleaner look than writing all the individual properties, however, we all code differently, so it is wise to find the style that suits you best&#8230;in the end the results are the same! <\/p>\n","protected":false},"excerpt":{"rendered":"<p>One of the many great features of CSS is that you can use shorthand properties to reduce the file size of your CSS. By reducing the file size, you cut down on bandwidth and most importantly you increase the speed\u00a0of your website loading times. Although both of these reasons are very minor, every bit of [&hellip;]<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[2],"tags":[],"_links":{"self":[{"href":"https:\/\/www.cssportal.com\/blog\/wp-json\/wp\/v2\/posts\/42"}],"collection":[{"href":"https:\/\/www.cssportal.com\/blog\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.cssportal.com\/blog\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.cssportal.com\/blog\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.cssportal.com\/blog\/wp-json\/wp\/v2\/comments?post=42"}],"version-history":[{"count":6,"href":"https:\/\/www.cssportal.com\/blog\/wp-json\/wp\/v2\/posts\/42\/revisions"}],"predecessor-version":[{"id":541,"href":"https:\/\/www.cssportal.com\/blog\/wp-json\/wp\/v2\/posts\/42\/revisions\/541"}],"wp:attachment":[{"href":"https:\/\/www.cssportal.com\/blog\/wp-json\/wp\/v2\/media?parent=42"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.cssportal.com\/blog\/wp-json\/wp\/v2\/categories?post=42"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.cssportal.com\/blog\/wp-json\/wp\/v2\/tags?post=42"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}